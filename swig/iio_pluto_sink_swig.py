# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iio_pluto_sink_swig', [dirname(__file__)])
        except ImportError:
            import _iio_pluto_sink_swig
            return _iio_pluto_sink_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_iio_pluto_sink_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _iio_pluto_sink_swig = swig_import_helper()
    del swig_import_helper
else:
    import _iio_pluto_sink_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _iio_pluto_sink_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _iio_pluto_sink_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _iio_pluto_sink_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _iio_pluto_sink_swig.high_res_timer_epoch()
class pluto_sink(object):
    """Proxy of C++ gr::iio::pluto_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, unsigned long buffer_size, bool cyclic, double attenuation, char const * filter, bool auto_filter=True) -> pluto_sink_sptr"""
        return _iio_pluto_sink_swig.pluto_sink_make(*args, **kwargs)

    make = staticmethod(make)

    def set_params(self, *args, **kwargs):
        """set_params(pluto_sink self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, double attenuation, char const * filter, bool auto_filter=True)"""
        return _iio_pluto_sink_swig.pluto_sink_set_params(self, *args, **kwargs)

    __swig_destroy__ = _iio_pluto_sink_swig.delete_pluto_sink
    __del__ = lambda self: None
pluto_sink_swigregister = _iio_pluto_sink_swig.pluto_sink_swigregister
pluto_sink_swigregister(pluto_sink)

def pluto_sink_make(*args, **kwargs):
    """pluto_sink_make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, unsigned long buffer_size, bool cyclic, double attenuation, char const * filter, bool auto_filter=True) -> pluto_sink_sptr"""
    return _iio_pluto_sink_swig.pluto_sink_make(*args, **kwargs)

class pluto_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::pluto_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::pluto_sink)> self) -> pluto_sink_sptr
        __init__(boost::shared_ptr<(gr::iio::pluto_sink)> self, pluto_sink p) -> pluto_sink_sptr
        """
        this = _iio_pluto_sink_swig.new_pluto_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pluto_sink_sptr self) -> pluto_sink"""
        return _iio_pluto_sink_swig.pluto_sink_sptr___deref__(self)

    __swig_destroy__ = _iio_pluto_sink_swig.delete_pluto_sink_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(pluto_sink_sptr self, std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, unsigned long buffer_size, bool cyclic, double attenuation, char const * filter, bool auto_filter=True) -> pluto_sink_sptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_make(self, *args, **kwargs)


    def set_params(self, *args, **kwargs):
        """set_params(pluto_sink_sptr self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, double attenuation, char const * filter, bool auto_filter=True)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_set_params(self, *args, **kwargs)


    def primitive_connect(self, *args):
        """
        primitive_connect(pluto_sink_sptr self, basic_block_sptr block)
        primitive_connect(pluto_sink_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_pluto_sink_swig.pluto_sink_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(pluto_sink_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(pluto_sink_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_pluto_sink_swig.pluto_sink_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(pluto_sink_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(pluto_sink_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_pluto_sink_swig.pluto_sink_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(pluto_sink_sptr self, basic_block_sptr block)
        primitive_disconnect(pluto_sink_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_pluto_sink_swig.pluto_sink_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(pluto_sink_sptr self)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_disconnect_all(self)


    def lock(self):
        """lock(pluto_sink_sptr self)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_lock(self)


    def unlock(self):
        """unlock(pluto_sink_sptr self)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(pluto_sink_sptr self, swig_int_ptr port_id)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(pluto_sink_sptr self, swig_int_ptr port_id)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pluto_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pluto_sink_sptr self)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pluto_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pluto_sink_sptr self, int i) -> size_t"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pluto_sink_sptr self, size_t max_output_buffer)
        set_max_output_buffer(pluto_sink_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_pluto_sink_swig.pluto_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pluto_sink_sptr self, int i) -> size_t"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pluto_sink_sptr self, size_t min_output_buffer)
        set_min_output_buffer(pluto_sink_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_pluto_sink_swig.pluto_sink_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(pluto_sink_sptr self) -> hier_block2_sptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_to_hier_block2(self)


    def name(self):
        """name(pluto_sink_sptr self) -> std::string"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pluto_sink_sptr self) -> std::string"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pluto_sink_sptr self) -> io_signature_sptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pluto_sink_sptr self) -> io_signature_sptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pluto_sink_sptr self) -> long"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pluto_sink_sptr self) -> basic_block_sptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pluto_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pluto_sink_sptr self) -> std::string"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pluto_sink_sptr self, std::string name)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pluto_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_pluto_sink_swig.pluto_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pluto_sink_sptr self) -> swig_int_ptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pluto_sink_sptr self) -> swig_int_ptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pluto_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_pluto_sink_swig.pluto_sink_sptr_message_subscribers(self, which_port)

pluto_sink_sptr_swigregister = _iio_pluto_sink_swig.pluto_sink_sptr_swigregister
pluto_sink_sptr_swigregister(pluto_sink_sptr)


pluto_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pluto_sink = pluto_sink.make;




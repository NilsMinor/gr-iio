# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iio_swig', [dirname(__file__)])
        except ImportError:
            import _iio_swig
            return _iio_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_iio_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _iio_swig = swig_import_helper()
    del swig_import_helper
else:
    import _iio_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _iio_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _iio_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _iio_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _iio_swig.high_res_timer_epoch()

_iio_swig.DEFAULT_BUFFER_SIZE_swigconstant(_iio_swig)
DEFAULT_BUFFER_SIZE = _iio_swig.DEFAULT_BUFFER_SIZE
class device_source(object):
    """Proxy of C++ gr::iio::device_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(uri, device, channels, device_phy, params, buffer_size=0x8000, decimation=0):
        """make(std::string const & uri, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int decimation=0) -> device_source_sptr"""
        return _iio_swig.device_source_make(uri, device, channels, device_phy, params, buffer_size, decimation)

    make = staticmethod(make)

    def make_from(ctx, device, channels, device_phy, params, buffer_size=0x8000, decimation=0):
        """make_from(iio_context * ctx, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int decimation=0) -> device_source_sptr"""
        return _iio_swig.device_source_make_from(ctx, device, channels, device_phy, params, buffer_size, decimation)

    make_from = staticmethod(make_from)

    def set_buffer_size(self, buffer_size):
        """set_buffer_size(device_source self, unsigned int buffer_size)"""
        return _iio_swig.device_source_set_buffer_size(self, buffer_size)


    def set_timeout_ms(self, timeout):
        """set_timeout_ms(device_source self, unsigned long timeout)"""
        return _iio_swig.device_source_set_timeout_ms(self, timeout)

    __swig_destroy__ = _iio_swig.delete_device_source
    __del__ = lambda self: None
device_source_swigregister = _iio_swig.device_source_swigregister
device_source_swigregister(device_source)

def device_source_make(uri, device, channels, device_phy, params, buffer_size=0x8000, decimation=0):
    """device_source_make(std::string const & uri, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int decimation=0) -> device_source_sptr"""
    return _iio_swig.device_source_make(uri, device, channels, device_phy, params, buffer_size, decimation)

def device_source_make_from(ctx, device, channels, device_phy, params, buffer_size=0x8000, decimation=0):
    """device_source_make_from(iio_context * ctx, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int decimation=0) -> device_source_sptr"""
    return _iio_swig.device_source_make_from(ctx, device, channels, device_phy, params, buffer_size, decimation)

class device_sink(object):
    """Proxy of C++ gr::iio::device_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(uri, device, channels, device_phy, params, buffer_size=0x8000, interpolation=0, cyclic=False):
        """make(std::string const & uri, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int interpolation=0, bool cyclic=False) -> device_sink_sptr"""
        return _iio_swig.device_sink_make(uri, device, channels, device_phy, params, buffer_size, interpolation, cyclic)

    make = staticmethod(make)

    def make_from(ctx, device, channels, device_phy, params, buffer_size=0x8000, interpolation=0, cyclic=False):
        """make_from(iio_context * ctx, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int interpolation=0, bool cyclic=False) -> device_sink_sptr"""
        return _iio_swig.device_sink_make_from(ctx, device, channels, device_phy, params, buffer_size, interpolation, cyclic)

    make_from = staticmethod(make_from)
    __swig_destroy__ = _iio_swig.delete_device_sink
    __del__ = lambda self: None
device_sink_swigregister = _iio_swig.device_sink_swigregister
device_sink_swigregister(device_sink)

def device_sink_make(uri, device, channels, device_phy, params, buffer_size=0x8000, interpolation=0, cyclic=False):
    """device_sink_make(std::string const & uri, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int interpolation=0, bool cyclic=False) -> device_sink_sptr"""
    return _iio_swig.device_sink_make(uri, device, channels, device_phy, params, buffer_size, interpolation, cyclic)

def device_sink_make_from(ctx, device, channels, device_phy, params, buffer_size=0x8000, interpolation=0, cyclic=False):
    """device_sink_make_from(iio_context * ctx, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int interpolation=0, bool cyclic=False) -> device_sink_sptr"""
    return _iio_swig.device_sink_make_from(ctx, device, channels, device_phy, params, buffer_size, interpolation, cyclic)

class fmcomms2_source(object):
    """Proxy of C++ gr::iio::fmcomms2_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_sptr"""
        return _iio_swig.fmcomms2_source_make(*args, **kwargs)

    make = staticmethod(make)

    def make_from(*args, **kwargs):
        """make_from(iio_context * ctx, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_sptr"""
        return _iio_swig.fmcomms2_source_make_from(*args, **kwargs)

    make_from = staticmethod(make_from)

    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_source self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_source_set_params(self, *args, **kwargs)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_source
    __del__ = lambda self: None
fmcomms2_source_swigregister = _iio_swig.fmcomms2_source_swigregister
fmcomms2_source_swigregister(fmcomms2_source)

def fmcomms2_source_make(*args, **kwargs):
    """fmcomms2_source_make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_sptr"""
    return _iio_swig.fmcomms2_source_make(*args, **kwargs)

def fmcomms2_source_make_from(*args, **kwargs):
    """fmcomms2_source_make_from(iio_context * ctx, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_sptr"""
    return _iio_swig.fmcomms2_source_make_from(*args, **kwargs)

class fmcomms2_source_f32c(object):
    """Proxy of C++ gr::iio::fmcomms2_source_f32c class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_f32c_sptr"""
        return _iio_swig.fmcomms2_source_f32c_make(*args, **kwargs)

    make = staticmethod(make)

    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_source_f32c self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_source_f32c_set_params(self, *args, **kwargs)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_source_f32c
    __del__ = lambda self: None
fmcomms2_source_f32c_swigregister = _iio_swig.fmcomms2_source_f32c_swigregister
fmcomms2_source_f32c_swigregister(fmcomms2_source_f32c)

def fmcomms2_source_f32c_make(*args, **kwargs):
    """fmcomms2_source_f32c_make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_f32c_sptr"""
    return _iio_swig.fmcomms2_source_f32c_make(*args, **kwargs)

class fmcomms2_sink(object):
    """Proxy of C++ gr::iio::fmcomms2_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_sptr"""
        return _iio_swig.fmcomms2_sink_make(*args, **kwargs)

    make = staticmethod(make)

    def make_from(*args, **kwargs):
        """make_from(iio_context * ctx, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_sptr"""
        return _iio_swig.fmcomms2_sink_make_from(*args, **kwargs)

    make_from = staticmethod(make_from)

    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_sink self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_sink_set_params(self, *args, **kwargs)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_sink
    __del__ = lambda self: None
fmcomms2_sink_swigregister = _iio_swig.fmcomms2_sink_swigregister
fmcomms2_sink_swigregister(fmcomms2_sink)

def fmcomms2_sink_make(*args, **kwargs):
    """fmcomms2_sink_make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_sptr"""
    return _iio_swig.fmcomms2_sink_make(*args, **kwargs)

def fmcomms2_sink_make_from(*args, **kwargs):
    """fmcomms2_sink_make_from(iio_context * ctx, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_sptr"""
    return _iio_swig.fmcomms2_sink_make_from(*args, **kwargs)

class fmcomms2_sink_f32c(object):
    """Proxy of C++ gr::iio::fmcomms2_sink_f32c class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_f32c_sptr"""
        return _iio_swig.fmcomms2_sink_f32c_make(*args, **kwargs)

    make = staticmethod(make)

    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_sink_f32c self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_sink_f32c_set_params(self, *args, **kwargs)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_sink_f32c
    __del__ = lambda self: None
fmcomms2_sink_f32c_swigregister = _iio_swig.fmcomms2_sink_f32c_swigregister
fmcomms2_sink_f32c_swigregister(fmcomms2_sink_f32c)

def fmcomms2_sink_f32c_make(*args, **kwargs):
    """fmcomms2_sink_f32c_make(std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_f32c_sptr"""
    return _iio_swig.fmcomms2_sink_f32c_make(*args, **kwargs)

class fmcomms5_source(object):
    """Proxy of C++ gr::iio::fmcomms5_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_sptr"""
        return _iio_swig.fmcomms5_source_make(*args, **kwargs)

    make = staticmethod(make)

    def make_from(*args, **kwargs):
        """make_from(iio_context * ctx, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_sptr"""
        return _iio_swig.fmcomms5_source_make_from(*args, **kwargs)

    make_from = staticmethod(make_from)

    def set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select):
        """set_params(fmcomms5_source self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select)"""
        return _iio_swig.fmcomms5_source_set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_source
    __del__ = lambda self: None
fmcomms5_source_swigregister = _iio_swig.fmcomms5_source_swigregister
fmcomms5_source_swigregister(fmcomms5_source)

def fmcomms5_source_make(*args, **kwargs):
    """fmcomms5_source_make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_sptr"""
    return _iio_swig.fmcomms5_source_make(*args, **kwargs)

def fmcomms5_source_make_from(*args, **kwargs):
    """fmcomms5_source_make_from(iio_context * ctx, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_sptr"""
    return _iio_swig.fmcomms5_source_make_from(*args, **kwargs)

class fmcomms5_source_f32c(object):
    """Proxy of C++ gr::iio::fmcomms5_source_f32c class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, bool rx3_en, bool rx4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_f32c_sptr"""
        return _iio_swig.fmcomms5_source_f32c_make(*args, **kwargs)

    make = staticmethod(make)

    def set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select):
        """set_params(fmcomms5_source_f32c self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select)"""
        return _iio_swig.fmcomms5_source_f32c_set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_source_f32c
    __del__ = lambda self: None
fmcomms5_source_f32c_swigregister = _iio_swig.fmcomms5_source_f32c_swigregister
fmcomms5_source_f32c_swigregister(fmcomms5_source_f32c)

def fmcomms5_source_f32c_make(*args, **kwargs):
    """fmcomms5_source_f32c_make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, bool rx3_en, bool rx4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_f32c_sptr"""
    return _iio_swig.fmcomms5_source_f32c_make(*args, **kwargs)

class fmcomms5_sink(object):
    """Proxy of C++ gr::iio::fmcomms5_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_sptr"""
        return _iio_swig.fmcomms5_sink_make(*args, **kwargs)

    make = staticmethod(make)

    def make_from(*args, **kwargs):
        """make_from(iio_context * ctx, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_sptr"""
        return _iio_swig.fmcomms5_sink_make_from(*args, **kwargs)

    make_from = staticmethod(make_from)

    def set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4):
        """set_params(fmcomms5_sink self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4)"""
        return _iio_swig.fmcomms5_sink_set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_sink
    __del__ = lambda self: None
fmcomms5_sink_swigregister = _iio_swig.fmcomms5_sink_swigregister
fmcomms5_sink_swigregister(fmcomms5_sink)

def fmcomms5_sink_make(*args, **kwargs):
    """fmcomms5_sink_make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_sptr"""
    return _iio_swig.fmcomms5_sink_make(*args, **kwargs)

def fmcomms5_sink_make_from(*args, **kwargs):
    """fmcomms5_sink_make_from(iio_context * ctx, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_sptr"""
    return _iio_swig.fmcomms5_sink_make_from(*args, **kwargs)

class fmcomms5_sink_f32c(object):
    """Proxy of C++ gr::iio::fmcomms5_sink_f32c class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, bool rx3_en, bool rx4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_f32c_sptr"""
        return _iio_swig.fmcomms5_sink_f32c_make(*args, **kwargs)

    make = staticmethod(make)

    def set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4):
        """set_params(fmcomms5_sink_f32c self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4)"""
        return _iio_swig.fmcomms5_sink_f32c_set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_sink_f32c
    __del__ = lambda self: None
fmcomms5_sink_f32c_swigregister = _iio_swig.fmcomms5_sink_f32c_swigregister
fmcomms5_sink_f32c_swigregister(fmcomms5_sink_f32c)

def fmcomms5_sink_f32c_make(*args, **kwargs):
    """fmcomms5_sink_f32c_make(std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, bool rx3_en, bool rx4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_f32c_sptr"""
    return _iio_swig.fmcomms5_sink_f32c_make(*args, **kwargs)

class iio_math(object):
    """Proxy of C++ gr::iio::iio_math class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(function, ninputs=1):
        """make(std::string const & function, int ninputs=1) -> iio_math_sptr"""
        return _iio_swig.iio_math_make(function, ninputs)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_iio_math
    __del__ = lambda self: None
iio_math_swigregister = _iio_swig.iio_math_swigregister
iio_math_swigregister(iio_math)

def iio_math_make(function, ninputs=1):
    """iio_math_make(std::string const & function, int ninputs=1) -> iio_math_sptr"""
    return _iio_swig.iio_math_make(function, ninputs)

class iio_math_gen(object):
    """Proxy of C++ gr::iio::iio_math_gen class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sampling_freq, wav_freq, function):
        """make(double sampling_freq, double wav_freq, std::string const & function) -> iio_math_gen_sptr"""
        return _iio_swig.iio_math_gen_make(sampling_freq, wav_freq, function)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_iio_math_gen
    __del__ = lambda self: None
iio_math_gen_swigregister = _iio_swig.iio_math_gen_swigregister
iio_math_gen_swigregister(iio_math_gen)

def iio_math_gen_make(sampling_freq, wav_freq, function):
    """iio_math_gen_make(double sampling_freq, double wav_freq, std::string const & function) -> iio_math_gen_sptr"""
    return _iio_swig.iio_math_gen_make(sampling_freq, wav_freq, function)

class power_ff(object):
    """Proxy of C++ gr::iio::power_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vlen=1):
        """make(size_t vlen=1) -> power_ff_sptr"""
        return _iio_swig.power_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_power_ff
    __del__ = lambda self: None
power_ff_swigregister = _iio_swig.power_ff_swigregister
power_ff_swigregister(power_ff)

def power_ff_make(vlen=1):
    """power_ff_make(size_t vlen=1) -> power_ff_sptr"""
    return _iio_swig.power_ff_make(vlen)

class modulo_ff(object):
    """Proxy of C++ gr::iio::modulo_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vlen=1):
        """make(size_t vlen=1) -> modulo_ff_sptr"""
        return _iio_swig.modulo_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_modulo_ff
    __del__ = lambda self: None
modulo_ff_swigregister = _iio_swig.modulo_ff_swigregister
modulo_ff_swigregister(modulo_ff)

def modulo_ff_make(vlen=1):
    """modulo_ff_make(size_t vlen=1) -> modulo_ff_sptr"""
    return _iio_swig.modulo_ff_make(vlen)

class modulo_const_ff(object):
    """Proxy of C++ gr::iio::modulo_const_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modulo, vlen=1):
        """make(float modulo, size_t vlen=1) -> modulo_const_ff_sptr"""
        return _iio_swig.modulo_const_ff_make(modulo, vlen)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_modulo_const_ff
    __del__ = lambda self: None
modulo_const_ff_swigregister = _iio_swig.modulo_const_ff_swigregister
modulo_const_ff_swigregister(modulo_const_ff)

def modulo_const_ff_make(modulo, vlen=1):
    """modulo_const_ff_make(float modulo, size_t vlen=1) -> modulo_const_ff_sptr"""
    return _iio_swig.modulo_const_ff_make(modulo, vlen)

class attr_sink(object):
    """Proxy of C++ gr::iio::attr_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(uri, device, channel, type, output, required_enable):
        """make(std::string const & uri, std::string const & device, std::string const & channel, int type, bool output, bool required_enable) -> attr_sink_sptr"""
        return _iio_swig.attr_sink_make(uri, device, channel, type, output, required_enable)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_attr_sink
    __del__ = lambda self: None
attr_sink_swigregister = _iio_swig.attr_sink_swigregister
attr_sink_swigregister(attr_sink)

def attr_sink_make(uri, device, channel, type, output, required_enable):
    """attr_sink_make(std::string const & uri, std::string const & device, std::string const & channel, int type, bool output, bool required_enable) -> attr_sink_sptr"""
    return _iio_swig.attr_sink_make(uri, device, channel, type, output, required_enable)

class attr_source(object):
    """Proxy of C++ gr::iio::attr_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(uri, device, channel, attribute, update_interval_ms, samples_per_update, data_type, attr_type, output, address, required_enable):
        """make(std::string const & uri, std::string const & device, std::string const & channel, std::string const & attribute, int update_interval_ms, int samples_per_update, int data_type, int attr_type, bool output, uint32_t address, bool required_enable) -> attr_source_sptr"""
        return _iio_swig.attr_source_make(uri, device, channel, attribute, update_interval_ms, samples_per_update, data_type, attr_type, output, address, required_enable)

    make = staticmethod(make)
    __swig_destroy__ = _iio_swig.delete_attr_source
    __del__ = lambda self: None
attr_source_swigregister = _iio_swig.attr_source_swigregister
attr_source_swigregister(attr_source)

def attr_source_make(uri, device, channel, attribute, update_interval_ms, samples_per_update, data_type, attr_type, output, address, required_enable):
    """attr_source_make(std::string const & uri, std::string const & device, std::string const & channel, std::string const & attribute, int update_interval_ms, int samples_per_update, int data_type, int attr_type, bool output, uint32_t address, bool required_enable) -> attr_source_sptr"""
    return _iio_swig.attr_source_make(uri, device, channel, attribute, update_interval_ms, samples_per_update, data_type, attr_type, output, address, required_enable)

class device_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::device_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::device_source)> self) -> device_source_sptr
        __init__(boost::shared_ptr<(gr::iio::device_source)> self, device_source p) -> device_source_sptr
        """
        this = _iio_swig.new_device_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(device_source_sptr self) -> device_source"""
        return _iio_swig.device_source_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_device_source_sptr
    __del__ = lambda self: None

    def make(self, uri, device, channels, device_phy, params, buffer_size=0x8000, decimation=0):
        """make(device_source_sptr self, std::string const & uri, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int decimation=0) -> device_source_sptr"""
        return _iio_swig.device_source_sptr_make(self, uri, device, channels, device_phy, params, buffer_size, decimation)


    def make_from(self, ctx, device, channels, device_phy, params, buffer_size=0x8000, decimation=0):
        """make_from(device_source_sptr self, iio_context * ctx, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int decimation=0) -> device_source_sptr"""
        return _iio_swig.device_source_sptr_make_from(self, ctx, device, channels, device_phy, params, buffer_size, decimation)


    def set_buffer_size(self, buffer_size):
        """set_buffer_size(device_source_sptr self, unsigned int buffer_size)"""
        return _iio_swig.device_source_sptr_set_buffer_size(self, buffer_size)


    def set_timeout_ms(self, timeout):
        """set_timeout_ms(device_source_sptr self, unsigned long timeout)"""
        return _iio_swig.device_source_sptr_set_timeout_ms(self, timeout)


    def history(self):
        """history(device_source_sptr self) -> unsigned int"""
        return _iio_swig.device_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(device_source_sptr self, int which, int delay)
        declare_sample_delay(device_source_sptr self, unsigned int delay)
        """
        return _iio_swig.device_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(device_source_sptr self, int which) -> unsigned int"""
        return _iio_swig.device_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(device_source_sptr self) -> int"""
        return _iio_swig.device_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(device_source_sptr self) -> double"""
        return _iio_swig.device_source_sptr_relative_rate(self)


    def start(self):
        """start(device_source_sptr self) -> bool"""
        return _iio_swig.device_source_sptr_start(self)


    def stop(self):
        """stop(device_source_sptr self) -> bool"""
        return _iio_swig.device_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(device_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.device_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(device_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.device_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(device_source_sptr self) -> int"""
        return _iio_swig.device_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(device_source_sptr self, int m)"""
        return _iio_swig.device_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(device_source_sptr self)"""
        return _iio_swig.device_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(device_source_sptr self) -> bool"""
        return _iio_swig.device_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(device_source_sptr self, int m)"""
        return _iio_swig.device_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(device_source_sptr self) -> int"""
        return _iio_swig.device_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(device_source_sptr self, int i) -> long"""
        return _iio_swig.device_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(device_source_sptr self, long max_output_buffer)
        set_max_output_buffer(device_source_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.device_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(device_source_sptr self, int i) -> long"""
        return _iio_swig.device_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(device_source_sptr self, long min_output_buffer)
        set_min_output_buffer(device_source_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.device_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(device_source_sptr self, int which) -> float
        pc_input_buffers_full(device_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(device_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(device_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(device_source_sptr self, int which) -> float
        pc_input_buffers_full_var(device_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(device_source_sptr self, int which) -> float
        pc_output_buffers_full(device_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(device_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(device_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(device_source_sptr self, int which) -> float
        pc_output_buffers_full_var(device_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(device_source_sptr self) -> float"""
        return _iio_swig.device_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(device_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.device_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(device_source_sptr self)"""
        return _iio_swig.device_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(device_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.device_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(device_source_sptr self) -> int"""
        return _iio_swig.device_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(device_source_sptr self) -> int"""
        return _iio_swig.device_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(device_source_sptr self, int priority) -> int"""
        return _iio_swig.device_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(device_source_sptr self) -> std::string"""
        return _iio_swig.device_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(device_source_sptr self) -> std::string"""
        return _iio_swig.device_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(device_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.device_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(device_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.device_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(device_source_sptr self) -> long"""
        return _iio_swig.device_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(device_source_sptr self) -> basic_block_sptr"""
        return _iio_swig.device_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(device_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.device_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(device_source_sptr self) -> std::string"""
        return _iio_swig.device_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(device_source_sptr self, std::string name)"""
        return _iio_swig.device_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(device_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.device_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(device_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.device_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(device_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.device_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(device_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.device_source_sptr_message_subscribers(self, which_port)

device_source_sptr_swigregister = _iio_swig.device_source_sptr_swigregister
device_source_sptr_swigregister(device_source_sptr)


device_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
device_source = device_source.make;

class device_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::device_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::device_sink)> self) -> device_sink_sptr
        __init__(boost::shared_ptr<(gr::iio::device_sink)> self, device_sink p) -> device_sink_sptr
        """
        this = _iio_swig.new_device_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(device_sink_sptr self) -> device_sink"""
        return _iio_swig.device_sink_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_device_sink_sptr
    __del__ = lambda self: None

    def make(self, uri, device, channels, device_phy, params, buffer_size=0x8000, interpolation=0, cyclic=False):
        """make(device_sink_sptr self, std::string const & uri, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int interpolation=0, bool cyclic=False) -> device_sink_sptr"""
        return _iio_swig.device_sink_sptr_make(self, uri, device, channels, device_phy, params, buffer_size, interpolation, cyclic)


    def make_from(self, ctx, device, channels, device_phy, params, buffer_size=0x8000, interpolation=0, cyclic=False):
        """make_from(device_sink_sptr self, iio_context * ctx, std::string const & device, std::vector< std::string,std::allocator< std::string > > const & channels, std::string const & device_phy, std::vector< std::string,std::allocator< std::string > > const & params, unsigned int buffer_size=0x8000, unsigned int interpolation=0, bool cyclic=False) -> device_sink_sptr"""
        return _iio_swig.device_sink_sptr_make_from(self, ctx, device, channels, device_phy, params, buffer_size, interpolation, cyclic)


    def history(self):
        """history(device_sink_sptr self) -> unsigned int"""
        return _iio_swig.device_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(device_sink_sptr self, int which, int delay)
        declare_sample_delay(device_sink_sptr self, unsigned int delay)
        """
        return _iio_swig.device_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(device_sink_sptr self, int which) -> unsigned int"""
        return _iio_swig.device_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(device_sink_sptr self) -> int"""
        return _iio_swig.device_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(device_sink_sptr self) -> double"""
        return _iio_swig.device_sink_sptr_relative_rate(self)


    def start(self):
        """start(device_sink_sptr self) -> bool"""
        return _iio_swig.device_sink_sptr_start(self)


    def stop(self):
        """stop(device_sink_sptr self) -> bool"""
        return _iio_swig.device_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(device_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.device_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(device_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.device_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(device_sink_sptr self) -> int"""
        return _iio_swig.device_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(device_sink_sptr self, int m)"""
        return _iio_swig.device_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(device_sink_sptr self)"""
        return _iio_swig.device_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(device_sink_sptr self) -> bool"""
        return _iio_swig.device_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(device_sink_sptr self, int m)"""
        return _iio_swig.device_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(device_sink_sptr self) -> int"""
        return _iio_swig.device_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(device_sink_sptr self, int i) -> long"""
        return _iio_swig.device_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(device_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(device_sink_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.device_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(device_sink_sptr self, int i) -> long"""
        return _iio_swig.device_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(device_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(device_sink_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.device_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(device_sink_sptr self, int which) -> float
        pc_input_buffers_full(device_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(device_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(device_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(device_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(device_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(device_sink_sptr self, int which) -> float
        pc_output_buffers_full(device_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(device_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(device_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(device_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(device_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.device_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(device_sink_sptr self) -> float"""
        return _iio_swig.device_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(device_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.device_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(device_sink_sptr self)"""
        return _iio_swig.device_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(device_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.device_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(device_sink_sptr self) -> int"""
        return _iio_swig.device_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(device_sink_sptr self) -> int"""
        return _iio_swig.device_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(device_sink_sptr self, int priority) -> int"""
        return _iio_swig.device_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(device_sink_sptr self) -> std::string"""
        return _iio_swig.device_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(device_sink_sptr self) -> std::string"""
        return _iio_swig.device_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(device_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.device_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(device_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.device_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(device_sink_sptr self) -> long"""
        return _iio_swig.device_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(device_sink_sptr self) -> basic_block_sptr"""
        return _iio_swig.device_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(device_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.device_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(device_sink_sptr self) -> std::string"""
        return _iio_swig.device_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(device_sink_sptr self, std::string name)"""
        return _iio_swig.device_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(device_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.device_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(device_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.device_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(device_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.device_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(device_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.device_sink_sptr_message_subscribers(self, which_port)

device_sink_sptr_swigregister = _iio_swig.device_sink_sptr_swigregister
device_sink_sptr_swigregister(device_sink_sptr)


device_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
device_sink = device_sink.make;

class fmcomms2_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms2_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_source)> self) -> fmcomms2_source_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_source)> self, fmcomms2_source p) -> fmcomms2_source_sptr
        """
        this = _iio_swig.new_fmcomms2_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms2_source_sptr self) -> fmcomms2_source"""
        return _iio_swig.fmcomms2_source_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_source_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms2_source_sptr self, std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_sptr"""
        return _iio_swig.fmcomms2_source_sptr_make(self, *args, **kwargs)


    def make_from(self, *args, **kwargs):
        """make_from(fmcomms2_source_sptr self, iio_context * ctx, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_sptr"""
        return _iio_swig.fmcomms2_source_sptr_make_from(self, *args, **kwargs)


    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_source_sptr self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_source_sptr_set_params(self, *args, **kwargs)


    def history(self):
        """history(fmcomms2_source_sptr self) -> unsigned int"""
        return _iio_swig.fmcomms2_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fmcomms2_source_sptr self, int which, int delay)
        declare_sample_delay(fmcomms2_source_sptr self, unsigned int delay)
        """
        return _iio_swig.fmcomms2_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fmcomms2_source_sptr self, int which) -> unsigned int"""
        return _iio_swig.fmcomms2_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fmcomms2_source_sptr self) -> int"""
        return _iio_swig.fmcomms2_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fmcomms2_source_sptr self) -> double"""
        return _iio_swig.fmcomms2_source_sptr_relative_rate(self)


    def start(self):
        """start(fmcomms2_source_sptr self) -> bool"""
        return _iio_swig.fmcomms2_source_sptr_start(self)


    def stop(self):
        """stop(fmcomms2_source_sptr self) -> bool"""
        return _iio_swig.fmcomms2_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fmcomms2_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.fmcomms2_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fmcomms2_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.fmcomms2_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fmcomms2_source_sptr self) -> int"""
        return _iio_swig.fmcomms2_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fmcomms2_source_sptr self, int m)"""
        return _iio_swig.fmcomms2_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fmcomms2_source_sptr self)"""
        return _iio_swig.fmcomms2_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fmcomms2_source_sptr self) -> bool"""
        return _iio_swig.fmcomms2_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fmcomms2_source_sptr self, int m)"""
        return _iio_swig.fmcomms2_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fmcomms2_source_sptr self) -> int"""
        return _iio_swig.fmcomms2_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms2_source_sptr self, int i) -> long"""
        return _iio_swig.fmcomms2_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms2_source_sptr self, long max_output_buffer)
        set_max_output_buffer(fmcomms2_source_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.fmcomms2_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms2_source_sptr self, int i) -> long"""
        return _iio_swig.fmcomms2_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms2_source_sptr self, long min_output_buffer)
        set_min_output_buffer(fmcomms2_source_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.fmcomms2_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fmcomms2_source_sptr self, int which) -> float
        pc_input_buffers_full(fmcomms2_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fmcomms2_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(fmcomms2_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fmcomms2_source_sptr self, int which) -> float
        pc_input_buffers_full_var(fmcomms2_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fmcomms2_source_sptr self, int which) -> float
        pc_output_buffers_full(fmcomms2_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fmcomms2_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(fmcomms2_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fmcomms2_source_sptr self, int which) -> float
        pc_output_buffers_full_var(fmcomms2_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fmcomms2_source_sptr self) -> float"""
        return _iio_swig.fmcomms2_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms2_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms2_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms2_source_sptr self)"""
        return _iio_swig.fmcomms2_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms2_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms2_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fmcomms2_source_sptr self) -> int"""
        return _iio_swig.fmcomms2_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fmcomms2_source_sptr self) -> int"""
        return _iio_swig.fmcomms2_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fmcomms2_source_sptr self, int priority) -> int"""
        return _iio_swig.fmcomms2_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fmcomms2_source_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms2_source_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms2_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms2_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms2_source_sptr self) -> long"""
        return _iio_swig.fmcomms2_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms2_source_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms2_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms2_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms2_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms2_source_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms2_source_sptr self, std::string name)"""
        return _iio_swig.fmcomms2_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms2_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms2_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms2_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms2_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms2_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_source_sptr_message_subscribers(self, which_port)

fmcomms2_source_sptr_swigregister = _iio_swig.fmcomms2_source_sptr_swigregister
fmcomms2_source_sptr_swigregister(fmcomms2_source_sptr)


fmcomms2_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms2_source = fmcomms2_source.make;

class fmcomms2_source_f32c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms2_source_f32c)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_source_f32c)> self) -> fmcomms2_source_f32c_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_source_f32c)> self, fmcomms2_source_f32c p) -> fmcomms2_source_f32c_sptr
        """
        this = _iio_swig.new_fmcomms2_source_f32c_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms2_source_f32c_sptr self) -> fmcomms2_source_f32c"""
        return _iio_swig.fmcomms2_source_f32c_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_source_f32c_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms2_source_f32c_sptr self, std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True) -> fmcomms2_source_f32c_sptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_make(self, *args, **kwargs)


    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_source_f32c_sptr self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * rf_port_select, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_set_params(self, *args, **kwargs)


    def primitive_connect(self, *args):
        """
        primitive_connect(fmcomms2_source_f32c_sptr self, basic_block_sptr block)
        primitive_connect(fmcomms2_source_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms2_source_f32c_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(fmcomms2_source_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(fmcomms2_source_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms2_source_f32c_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(fmcomms2_source_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(fmcomms2_source_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms2_source_f32c_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(fmcomms2_source_f32c_sptr self, basic_block_sptr block)
        primitive_disconnect(fmcomms2_source_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms2_source_f32c_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(fmcomms2_source_f32c_sptr self)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_disconnect_all(self)


    def lock(self):
        """lock(fmcomms2_source_f32c_sptr self)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_lock(self)


    def unlock(self):
        """unlock(fmcomms2_source_f32c_sptr self)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(fmcomms2_source_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(fmcomms2_source_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms2_source_f32c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms2_source_f32c_sptr self)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms2_source_f32c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms2_source_f32c_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms2_source_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms2_source_f32c_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms2_source_f32c_sptr self, size_t max_output_buffer)
        set_max_output_buffer(fmcomms2_source_f32c_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_swig.fmcomms2_source_f32c_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms2_source_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms2_source_f32c_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms2_source_f32c_sptr self, size_t min_output_buffer)
        set_min_output_buffer(fmcomms2_source_f32c_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_swig.fmcomms2_source_f32c_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(fmcomms2_source_f32c_sptr self) -> hier_block2_sptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_to_hier_block2(self)


    def name(self):
        """name(fmcomms2_source_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_source_f32c_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms2_source_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_source_f32c_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms2_source_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms2_source_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms2_source_f32c_sptr self) -> long"""
        return _iio_swig.fmcomms2_source_f32c_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms2_source_f32c_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms2_source_f32c_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms2_source_f32c_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms2_source_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_source_f32c_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms2_source_f32c_sptr self, std::string name)"""
        return _iio_swig.fmcomms2_source_f32c_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms2_source_f32c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms2_source_f32c_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms2_source_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms2_source_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms2_source_f32c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_source_f32c_sptr_message_subscribers(self, which_port)

fmcomms2_source_f32c_sptr_swigregister = _iio_swig.fmcomms2_source_f32c_sptr_swigregister
fmcomms2_source_f32c_sptr_swigregister(fmcomms2_source_f32c_sptr)


fmcomms2_source_f32c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms2_source_f32c = fmcomms2_source_f32c.make;

class fmcomms2_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms2_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_sink)> self) -> fmcomms2_sink_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_sink)> self, fmcomms2_sink p) -> fmcomms2_sink_sptr
        """
        this = _iio_swig.new_fmcomms2_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms2_sink_sptr self) -> fmcomms2_sink"""
        return _iio_swig.fmcomms2_sink_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_sink_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms2_sink_sptr self, std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_sptr"""
        return _iio_swig.fmcomms2_sink_sptr_make(self, *args, **kwargs)


    def make_from(self, *args, **kwargs):
        """make_from(fmcomms2_sink_sptr self, iio_context * ctx, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_sptr"""
        return _iio_swig.fmcomms2_sink_sptr_make_from(self, *args, **kwargs)


    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_sink_sptr self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_sink_sptr_set_params(self, *args, **kwargs)


    def history(self):
        """history(fmcomms2_sink_sptr self) -> unsigned int"""
        return _iio_swig.fmcomms2_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fmcomms2_sink_sptr self, int which, int delay)
        declare_sample_delay(fmcomms2_sink_sptr self, unsigned int delay)
        """
        return _iio_swig.fmcomms2_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fmcomms2_sink_sptr self, int which) -> unsigned int"""
        return _iio_swig.fmcomms2_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fmcomms2_sink_sptr self) -> int"""
        return _iio_swig.fmcomms2_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fmcomms2_sink_sptr self) -> double"""
        return _iio_swig.fmcomms2_sink_sptr_relative_rate(self)


    def start(self):
        """start(fmcomms2_sink_sptr self) -> bool"""
        return _iio_swig.fmcomms2_sink_sptr_start(self)


    def stop(self):
        """stop(fmcomms2_sink_sptr self) -> bool"""
        return _iio_swig.fmcomms2_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fmcomms2_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.fmcomms2_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fmcomms2_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.fmcomms2_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fmcomms2_sink_sptr self) -> int"""
        return _iio_swig.fmcomms2_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fmcomms2_sink_sptr self, int m)"""
        return _iio_swig.fmcomms2_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fmcomms2_sink_sptr self)"""
        return _iio_swig.fmcomms2_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fmcomms2_sink_sptr self) -> bool"""
        return _iio_swig.fmcomms2_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fmcomms2_sink_sptr self, int m)"""
        return _iio_swig.fmcomms2_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fmcomms2_sink_sptr self) -> int"""
        return _iio_swig.fmcomms2_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms2_sink_sptr self, int i) -> long"""
        return _iio_swig.fmcomms2_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms2_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(fmcomms2_sink_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.fmcomms2_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms2_sink_sptr self, int i) -> long"""
        return _iio_swig.fmcomms2_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms2_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(fmcomms2_sink_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.fmcomms2_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fmcomms2_sink_sptr self, int which) -> float
        pc_input_buffers_full(fmcomms2_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fmcomms2_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(fmcomms2_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fmcomms2_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(fmcomms2_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fmcomms2_sink_sptr self, int which) -> float
        pc_output_buffers_full(fmcomms2_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fmcomms2_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(fmcomms2_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fmcomms2_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(fmcomms2_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms2_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fmcomms2_sink_sptr self) -> float"""
        return _iio_swig.fmcomms2_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms2_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms2_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms2_sink_sptr self)"""
        return _iio_swig.fmcomms2_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms2_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms2_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fmcomms2_sink_sptr self) -> int"""
        return _iio_swig.fmcomms2_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fmcomms2_sink_sptr self) -> int"""
        return _iio_swig.fmcomms2_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fmcomms2_sink_sptr self, int priority) -> int"""
        return _iio_swig.fmcomms2_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fmcomms2_sink_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms2_sink_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms2_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms2_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms2_sink_sptr self) -> long"""
        return _iio_swig.fmcomms2_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms2_sink_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms2_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms2_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms2_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms2_sink_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms2_sink_sptr self, std::string name)"""
        return _iio_swig.fmcomms2_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms2_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms2_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms2_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms2_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms2_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_sink_sptr_message_subscribers(self, which_port)

fmcomms2_sink_sptr_swigregister = _iio_swig.fmcomms2_sink_sptr_swigregister
fmcomms2_sink_sptr_swigregister(fmcomms2_sink_sptr)


fmcomms2_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms2_sink = fmcomms2_sink.make;

class fmcomms2_sink_f32c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms2_sink_f32c)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_sink_f32c)> self) -> fmcomms2_sink_f32c_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms2_sink_f32c)> self, fmcomms2_sink_f32c p) -> fmcomms2_sink_f32c_sptr
        """
        this = _iio_swig.new_fmcomms2_sink_f32c_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms2_sink_f32c_sptr self) -> fmcomms2_sink_f32c"""
        return _iio_swig.fmcomms2_sink_f32c_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms2_sink_f32c_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms2_sink_f32c_sptr self, std::string const & uri, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True) -> fmcomms2_sink_f32c_sptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_make(self, *args, **kwargs)


    def set_params(self, *args, **kwargs):
        """set_params(fmcomms2_sink_f32c_sptr self, unsigned long long frequency, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, char const * filter, bool auto_filter=True)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_set_params(self, *args, **kwargs)


    def primitive_connect(self, *args):
        """
        primitive_connect(fmcomms2_sink_f32c_sptr self, basic_block_sptr block)
        primitive_connect(fmcomms2_sink_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms2_sink_f32c_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(fmcomms2_sink_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(fmcomms2_sink_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms2_sink_f32c_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(fmcomms2_sink_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(fmcomms2_sink_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms2_sink_f32c_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(fmcomms2_sink_f32c_sptr self, basic_block_sptr block)
        primitive_disconnect(fmcomms2_sink_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms2_sink_f32c_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(fmcomms2_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_disconnect_all(self)


    def lock(self):
        """lock(fmcomms2_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_lock(self)


    def unlock(self):
        """unlock(fmcomms2_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(fmcomms2_sink_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(fmcomms2_sink_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms2_sink_f32c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms2_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms2_sink_f32c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms2_sink_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms2_sink_f32c_sptr self, size_t max_output_buffer)
        set_max_output_buffer(fmcomms2_sink_f32c_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_swig.fmcomms2_sink_f32c_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms2_sink_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms2_sink_f32c_sptr self, size_t min_output_buffer)
        set_min_output_buffer(fmcomms2_sink_f32c_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_swig.fmcomms2_sink_f32c_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(fmcomms2_sink_f32c_sptr self) -> hier_block2_sptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_to_hier_block2(self)


    def name(self):
        """name(fmcomms2_sink_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms2_sink_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms2_sink_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms2_sink_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms2_sink_f32c_sptr self) -> long"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms2_sink_f32c_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms2_sink_f32c_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms2_sink_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms2_sink_f32c_sptr self, std::string name)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms2_sink_f32c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms2_sink_f32c_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms2_sink_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms2_sink_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms2_sink_f32c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms2_sink_f32c_sptr_message_subscribers(self, which_port)

fmcomms2_sink_f32c_sptr_swigregister = _iio_swig.fmcomms2_sink_f32c_sptr_swigregister
fmcomms2_sink_f32c_sptr_swigregister(fmcomms2_sink_f32c_sptr)


fmcomms2_sink_f32c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms2_sink_f32c = fmcomms2_sink_f32c.make;

class fmcomms5_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms5_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_source)> self) -> fmcomms5_source_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_source)> self, fmcomms5_source p) -> fmcomms5_source_sptr
        """
        this = _iio_swig.new_fmcomms5_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms5_source_sptr self) -> fmcomms5_source"""
        return _iio_swig.fmcomms5_source_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_source_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms5_source_sptr self, std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_sptr"""
        return _iio_swig.fmcomms5_source_sptr_make(self, *args, **kwargs)


    def make_from(self, *args, **kwargs):
        """make_from(fmcomms5_source_sptr self, iio_context * ctx, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_sptr"""
        return _iio_swig.fmcomms5_source_sptr_make_from(self, *args, **kwargs)


    def set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select):
        """set_params(fmcomms5_source_sptr self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select)"""
        return _iio_swig.fmcomms5_source_sptr_set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select)


    def history(self):
        """history(fmcomms5_source_sptr self) -> unsigned int"""
        return _iio_swig.fmcomms5_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fmcomms5_source_sptr self, int which, int delay)
        declare_sample_delay(fmcomms5_source_sptr self, unsigned int delay)
        """
        return _iio_swig.fmcomms5_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fmcomms5_source_sptr self, int which) -> unsigned int"""
        return _iio_swig.fmcomms5_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fmcomms5_source_sptr self) -> int"""
        return _iio_swig.fmcomms5_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fmcomms5_source_sptr self) -> double"""
        return _iio_swig.fmcomms5_source_sptr_relative_rate(self)


    def start(self):
        """start(fmcomms5_source_sptr self) -> bool"""
        return _iio_swig.fmcomms5_source_sptr_start(self)


    def stop(self):
        """stop(fmcomms5_source_sptr self) -> bool"""
        return _iio_swig.fmcomms5_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fmcomms5_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.fmcomms5_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fmcomms5_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.fmcomms5_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fmcomms5_source_sptr self) -> int"""
        return _iio_swig.fmcomms5_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fmcomms5_source_sptr self, int m)"""
        return _iio_swig.fmcomms5_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fmcomms5_source_sptr self)"""
        return _iio_swig.fmcomms5_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fmcomms5_source_sptr self) -> bool"""
        return _iio_swig.fmcomms5_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fmcomms5_source_sptr self, int m)"""
        return _iio_swig.fmcomms5_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fmcomms5_source_sptr self) -> int"""
        return _iio_swig.fmcomms5_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms5_source_sptr self, int i) -> long"""
        return _iio_swig.fmcomms5_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms5_source_sptr self, long max_output_buffer)
        set_max_output_buffer(fmcomms5_source_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.fmcomms5_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms5_source_sptr self, int i) -> long"""
        return _iio_swig.fmcomms5_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms5_source_sptr self, long min_output_buffer)
        set_min_output_buffer(fmcomms5_source_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.fmcomms5_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fmcomms5_source_sptr self, int which) -> float
        pc_input_buffers_full(fmcomms5_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fmcomms5_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(fmcomms5_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fmcomms5_source_sptr self, int which) -> float
        pc_input_buffers_full_var(fmcomms5_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fmcomms5_source_sptr self, int which) -> float
        pc_output_buffers_full(fmcomms5_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fmcomms5_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(fmcomms5_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fmcomms5_source_sptr self, int which) -> float
        pc_output_buffers_full_var(fmcomms5_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fmcomms5_source_sptr self) -> float"""
        return _iio_swig.fmcomms5_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms5_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms5_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms5_source_sptr self)"""
        return _iio_swig.fmcomms5_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms5_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms5_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fmcomms5_source_sptr self) -> int"""
        return _iio_swig.fmcomms5_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fmcomms5_source_sptr self) -> int"""
        return _iio_swig.fmcomms5_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fmcomms5_source_sptr self, int priority) -> int"""
        return _iio_swig.fmcomms5_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fmcomms5_source_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms5_source_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms5_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms5_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms5_source_sptr self) -> long"""
        return _iio_swig.fmcomms5_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms5_source_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms5_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms5_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms5_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms5_source_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms5_source_sptr self, std::string name)"""
        return _iio_swig.fmcomms5_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms5_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms5_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms5_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms5_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms5_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_source_sptr_message_subscribers(self, which_port)

fmcomms5_source_sptr_swigregister = _iio_swig.fmcomms5_source_sptr_swigregister
fmcomms5_source_sptr_swigregister(fmcomms5_source_sptr)


fmcomms5_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms5_source = fmcomms5_source.make;

class fmcomms5_source_f32c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms5_source_f32c)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_source_f32c)> self) -> fmcomms5_source_f32c_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_source_f32c)> self, fmcomms5_source_f32c p) -> fmcomms5_source_f32c_sptr
        """
        this = _iio_swig.new_fmcomms5_source_f32c_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms5_source_f32c_sptr self) -> fmcomms5_source_f32c"""
        return _iio_swig.fmcomms5_source_f32c_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_source_f32c_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms5_source_f32c_sptr self, std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, bool rx3_en, bool rx4_en, unsigned long buffer_size, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select, char const * filter) -> fmcomms5_source_f32c_sptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_make(self, *args, **kwargs)


    def set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select):
        """set_params(fmcomms5_source_f32c_sptr self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool quadrature, bool rfdc, bool bbdc, char const * gain1, double gain1_value, char const * gain2, double gain2_value, char const * gain3, double gain3_value, char const * gain4, double gain4_value, char const * rf_port_select)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_set_params(self, frequency1, frequency2, samplerate, bandwidth, quadrature, rfdc, bbdc, gain1, gain1_value, gain2, gain2_value, gain3, gain3_value, gain4, gain4_value, rf_port_select)


    def primitive_connect(self, *args):
        """
        primitive_connect(fmcomms5_source_f32c_sptr self, basic_block_sptr block)
        primitive_connect(fmcomms5_source_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms5_source_f32c_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(fmcomms5_source_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(fmcomms5_source_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms5_source_f32c_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(fmcomms5_source_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(fmcomms5_source_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms5_source_f32c_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(fmcomms5_source_f32c_sptr self, basic_block_sptr block)
        primitive_disconnect(fmcomms5_source_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms5_source_f32c_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(fmcomms5_source_f32c_sptr self)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_disconnect_all(self)


    def lock(self):
        """lock(fmcomms5_source_f32c_sptr self)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_lock(self)


    def unlock(self):
        """unlock(fmcomms5_source_f32c_sptr self)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(fmcomms5_source_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(fmcomms5_source_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms5_source_f32c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms5_source_f32c_sptr self)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms5_source_f32c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms5_source_f32c_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms5_source_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms5_source_f32c_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms5_source_f32c_sptr self, size_t max_output_buffer)
        set_max_output_buffer(fmcomms5_source_f32c_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_swig.fmcomms5_source_f32c_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms5_source_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms5_source_f32c_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms5_source_f32c_sptr self, size_t min_output_buffer)
        set_min_output_buffer(fmcomms5_source_f32c_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_swig.fmcomms5_source_f32c_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(fmcomms5_source_f32c_sptr self) -> hier_block2_sptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_to_hier_block2(self)


    def name(self):
        """name(fmcomms5_source_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_source_f32c_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms5_source_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_source_f32c_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms5_source_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms5_source_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms5_source_f32c_sptr self) -> long"""
        return _iio_swig.fmcomms5_source_f32c_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms5_source_f32c_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms5_source_f32c_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms5_source_f32c_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms5_source_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_source_f32c_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms5_source_f32c_sptr self, std::string name)"""
        return _iio_swig.fmcomms5_source_f32c_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms5_source_f32c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms5_source_f32c_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms5_source_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms5_source_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms5_source_f32c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_source_f32c_sptr_message_subscribers(self, which_port)

fmcomms5_source_f32c_sptr_swigregister = _iio_swig.fmcomms5_source_f32c_sptr_swigregister
fmcomms5_source_f32c_sptr_swigregister(fmcomms5_source_f32c_sptr)


fmcomms5_source_f32c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms5_source_f32c = fmcomms5_source_f32c.make;

class fmcomms5_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms5_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_sink)> self) -> fmcomms5_sink_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_sink)> self, fmcomms5_sink p) -> fmcomms5_sink_sptr
        """
        this = _iio_swig.new_fmcomms5_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms5_sink_sptr self) -> fmcomms5_sink"""
        return _iio_swig.fmcomms5_sink_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_sink_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms5_sink_sptr self, std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_sptr"""
        return _iio_swig.fmcomms5_sink_sptr_make(self, *args, **kwargs)


    def make_from(self, *args, **kwargs):
        """make_from(fmcomms5_sink_sptr self, iio_context * ctx, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en, bool ch5_en, bool ch6_en, bool ch7_en, bool ch8_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_sptr"""
        return _iio_swig.fmcomms5_sink_sptr_make_from(self, *args, **kwargs)


    def set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4):
        """set_params(fmcomms5_sink_sptr self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4)"""
        return _iio_swig.fmcomms5_sink_sptr_set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4)


    def history(self):
        """history(fmcomms5_sink_sptr self) -> unsigned int"""
        return _iio_swig.fmcomms5_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fmcomms5_sink_sptr self, int which, int delay)
        declare_sample_delay(fmcomms5_sink_sptr self, unsigned int delay)
        """
        return _iio_swig.fmcomms5_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fmcomms5_sink_sptr self, int which) -> unsigned int"""
        return _iio_swig.fmcomms5_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fmcomms5_sink_sptr self) -> int"""
        return _iio_swig.fmcomms5_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fmcomms5_sink_sptr self) -> double"""
        return _iio_swig.fmcomms5_sink_sptr_relative_rate(self)


    def start(self):
        """start(fmcomms5_sink_sptr self) -> bool"""
        return _iio_swig.fmcomms5_sink_sptr_start(self)


    def stop(self):
        """stop(fmcomms5_sink_sptr self) -> bool"""
        return _iio_swig.fmcomms5_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fmcomms5_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.fmcomms5_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fmcomms5_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.fmcomms5_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fmcomms5_sink_sptr self) -> int"""
        return _iio_swig.fmcomms5_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fmcomms5_sink_sptr self, int m)"""
        return _iio_swig.fmcomms5_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fmcomms5_sink_sptr self)"""
        return _iio_swig.fmcomms5_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fmcomms5_sink_sptr self) -> bool"""
        return _iio_swig.fmcomms5_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fmcomms5_sink_sptr self, int m)"""
        return _iio_swig.fmcomms5_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fmcomms5_sink_sptr self) -> int"""
        return _iio_swig.fmcomms5_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms5_sink_sptr self, int i) -> long"""
        return _iio_swig.fmcomms5_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms5_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(fmcomms5_sink_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.fmcomms5_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms5_sink_sptr self, int i) -> long"""
        return _iio_swig.fmcomms5_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms5_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(fmcomms5_sink_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.fmcomms5_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fmcomms5_sink_sptr self, int which) -> float
        pc_input_buffers_full(fmcomms5_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fmcomms5_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(fmcomms5_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fmcomms5_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(fmcomms5_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fmcomms5_sink_sptr self, int which) -> float
        pc_output_buffers_full(fmcomms5_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fmcomms5_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(fmcomms5_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fmcomms5_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(fmcomms5_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.fmcomms5_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fmcomms5_sink_sptr self) -> float"""
        return _iio_swig.fmcomms5_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms5_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms5_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms5_sink_sptr self)"""
        return _iio_swig.fmcomms5_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms5_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms5_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fmcomms5_sink_sptr self) -> int"""
        return _iio_swig.fmcomms5_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fmcomms5_sink_sptr self) -> int"""
        return _iio_swig.fmcomms5_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fmcomms5_sink_sptr self, int priority) -> int"""
        return _iio_swig.fmcomms5_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fmcomms5_sink_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms5_sink_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms5_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms5_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms5_sink_sptr self) -> long"""
        return _iio_swig.fmcomms5_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms5_sink_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms5_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms5_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms5_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms5_sink_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms5_sink_sptr self, std::string name)"""
        return _iio_swig.fmcomms5_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms5_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms5_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms5_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms5_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms5_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_sink_sptr_message_subscribers(self, which_port)

fmcomms5_sink_sptr_swigregister = _iio_swig.fmcomms5_sink_sptr_swigregister
fmcomms5_sink_sptr_swigregister(fmcomms5_sink_sptr)


fmcomms5_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms5_sink = fmcomms5_sink.make;

class fmcomms5_sink_f32c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::fmcomms5_sink_f32c)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_sink_f32c)> self) -> fmcomms5_sink_f32c_sptr
        __init__(boost::shared_ptr<(gr::iio::fmcomms5_sink_f32c)> self, fmcomms5_sink_f32c p) -> fmcomms5_sink_f32c_sptr
        """
        this = _iio_swig.new_fmcomms5_sink_f32c_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fmcomms5_sink_f32c_sptr self) -> fmcomms5_sink_f32c"""
        return _iio_swig.fmcomms5_sink_f32c_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_fmcomms5_sink_f32c_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """make(fmcomms5_sink_f32c_sptr self, std::string const & uri, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, bool rx1_en, bool rx2_en, bool rx3_en, bool rx4_en, unsigned long buffer_size, bool cyclic, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4, char const * filter) -> fmcomms5_sink_f32c_sptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_make(self, *args, **kwargs)


    def set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4):
        """set_params(fmcomms5_sink_f32c_sptr self, unsigned long long frequency1, unsigned long long frequency2, unsigned long samplerate, unsigned long bandwidth, char const * rf_port_select, double attenuation1, double attenuation2, double attenuation3, double attenuation4)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_set_params(self, frequency1, frequency2, samplerate, bandwidth, rf_port_select, attenuation1, attenuation2, attenuation3, attenuation4)


    def primitive_connect(self, *args):
        """
        primitive_connect(fmcomms5_sink_f32c_sptr self, basic_block_sptr block)
        primitive_connect(fmcomms5_sink_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms5_sink_f32c_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(fmcomms5_sink_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(fmcomms5_sink_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms5_sink_f32c_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(fmcomms5_sink_f32c_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(fmcomms5_sink_f32c_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.fmcomms5_sink_f32c_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(fmcomms5_sink_f32c_sptr self, basic_block_sptr block)
        primitive_disconnect(fmcomms5_sink_f32c_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.fmcomms5_sink_f32c_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(fmcomms5_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_disconnect_all(self)


    def lock(self):
        """lock(fmcomms5_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_lock(self)


    def unlock(self):
        """unlock(fmcomms5_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(fmcomms5_sink_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(fmcomms5_sink_f32c_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fmcomms5_sink_f32c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fmcomms5_sink_f32c_sptr self)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fmcomms5_sink_f32c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fmcomms5_sink_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fmcomms5_sink_f32c_sptr self, size_t max_output_buffer)
        set_max_output_buffer(fmcomms5_sink_f32c_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_swig.fmcomms5_sink_f32c_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fmcomms5_sink_f32c_sptr self, int i) -> size_t"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fmcomms5_sink_f32c_sptr self, size_t min_output_buffer)
        set_min_output_buffer(fmcomms5_sink_f32c_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_swig.fmcomms5_sink_f32c_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(fmcomms5_sink_f32c_sptr self) -> hier_block2_sptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_to_hier_block2(self)


    def name(self):
        """name(fmcomms5_sink_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fmcomms5_sink_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fmcomms5_sink_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fmcomms5_sink_f32c_sptr self) -> io_signature_sptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fmcomms5_sink_f32c_sptr self) -> long"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fmcomms5_sink_f32c_sptr self) -> basic_block_sptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fmcomms5_sink_f32c_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fmcomms5_sink_f32c_sptr self) -> std::string"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fmcomms5_sink_f32c_sptr self, std::string name)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fmcomms5_sink_f32c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.fmcomms5_sink_f32c_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fmcomms5_sink_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fmcomms5_sink_f32c_sptr self) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fmcomms5_sink_f32c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.fmcomms5_sink_f32c_sptr_message_subscribers(self, which_port)

fmcomms5_sink_f32c_sptr_swigregister = _iio_swig.fmcomms5_sink_f32c_sptr_swigregister
fmcomms5_sink_f32c_sptr_swigregister(fmcomms5_sink_f32c_sptr)


fmcomms5_sink_f32c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmcomms5_sink_f32c = fmcomms5_sink_f32c.make;

class iio_math_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::iio_math)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::iio_math)> self) -> iio_math_sptr
        __init__(boost::shared_ptr<(gr::iio::iio_math)> self, iio_math p) -> iio_math_sptr
        """
        this = _iio_swig.new_iio_math_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(iio_math_sptr self) -> iio_math"""
        return _iio_swig.iio_math_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_iio_math_sptr
    __del__ = lambda self: None

    def make(self, function, ninputs=1):
        """make(iio_math_sptr self, std::string const & function, int ninputs=1) -> iio_math_sptr"""
        return _iio_swig.iio_math_sptr_make(self, function, ninputs)


    def primitive_connect(self, *args):
        """
        primitive_connect(iio_math_sptr self, basic_block_sptr block)
        primitive_connect(iio_math_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.iio_math_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(iio_math_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(iio_math_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.iio_math_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(iio_math_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(iio_math_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.iio_math_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(iio_math_sptr self, basic_block_sptr block)
        primitive_disconnect(iio_math_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.iio_math_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(iio_math_sptr self)"""
        return _iio_swig.iio_math_sptr_disconnect_all(self)


    def lock(self):
        """lock(iio_math_sptr self)"""
        return _iio_swig.iio_math_sptr_lock(self)


    def unlock(self):
        """unlock(iio_math_sptr self)"""
        return _iio_swig.iio_math_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(iio_math_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.iio_math_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(iio_math_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.iio_math_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(iio_math_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.iio_math_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(iio_math_sptr self)"""
        return _iio_swig.iio_math_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(iio_math_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.iio_math_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(iio_math_sptr self, int i) -> size_t"""
        return _iio_swig.iio_math_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(iio_math_sptr self, size_t max_output_buffer)
        set_max_output_buffer(iio_math_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_swig.iio_math_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(iio_math_sptr self, int i) -> size_t"""
        return _iio_swig.iio_math_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(iio_math_sptr self, size_t min_output_buffer)
        set_min_output_buffer(iio_math_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_swig.iio_math_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(iio_math_sptr self) -> hier_block2_sptr"""
        return _iio_swig.iio_math_sptr_to_hier_block2(self)


    def name(self):
        """name(iio_math_sptr self) -> std::string"""
        return _iio_swig.iio_math_sptr_name(self)


    def symbol_name(self):
        """symbol_name(iio_math_sptr self) -> std::string"""
        return _iio_swig.iio_math_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(iio_math_sptr self) -> io_signature_sptr"""
        return _iio_swig.iio_math_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(iio_math_sptr self) -> io_signature_sptr"""
        return _iio_swig.iio_math_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(iio_math_sptr self) -> long"""
        return _iio_swig.iio_math_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(iio_math_sptr self) -> basic_block_sptr"""
        return _iio_swig.iio_math_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(iio_math_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.iio_math_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(iio_math_sptr self) -> std::string"""
        return _iio_swig.iio_math_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(iio_math_sptr self, std::string name)"""
        return _iio_swig.iio_math_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(iio_math_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.iio_math_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(iio_math_sptr self) -> swig_int_ptr"""
        return _iio_swig.iio_math_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(iio_math_sptr self) -> swig_int_ptr"""
        return _iio_swig.iio_math_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(iio_math_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.iio_math_sptr_message_subscribers(self, which_port)

iio_math_sptr_swigregister = _iio_swig.iio_math_sptr_swigregister
iio_math_sptr_swigregister(iio_math_sptr)


iio_math_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
iio_math = iio_math.make;

class iio_math_gen_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::iio_math_gen)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::iio_math_gen)> self) -> iio_math_gen_sptr
        __init__(boost::shared_ptr<(gr::iio::iio_math_gen)> self, iio_math_gen p) -> iio_math_gen_sptr
        """
        this = _iio_swig.new_iio_math_gen_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(iio_math_gen_sptr self) -> iio_math_gen"""
        return _iio_swig.iio_math_gen_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_iio_math_gen_sptr
    __del__ = lambda self: None

    def make(self, sampling_freq, wav_freq, function):
        """make(iio_math_gen_sptr self, double sampling_freq, double wav_freq, std::string const & function) -> iio_math_gen_sptr"""
        return _iio_swig.iio_math_gen_sptr_make(self, sampling_freq, wav_freq, function)


    def primitive_connect(self, *args):
        """
        primitive_connect(iio_math_gen_sptr self, basic_block_sptr block)
        primitive_connect(iio_math_gen_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.iio_math_gen_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(iio_math_gen_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(iio_math_gen_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.iio_math_gen_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(iio_math_gen_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(iio_math_gen_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _iio_swig.iio_math_gen_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(iio_math_gen_sptr self, basic_block_sptr block)
        primitive_disconnect(iio_math_gen_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _iio_swig.iio_math_gen_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(iio_math_gen_sptr self)"""
        return _iio_swig.iio_math_gen_sptr_disconnect_all(self)


    def lock(self):
        """lock(iio_math_gen_sptr self)"""
        return _iio_swig.iio_math_gen_sptr_lock(self)


    def unlock(self):
        """unlock(iio_math_gen_sptr self)"""
        return _iio_swig.iio_math_gen_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(iio_math_gen_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.iio_math_gen_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(iio_math_gen_sptr self, swig_int_ptr port_id)"""
        return _iio_swig.iio_math_gen_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(iio_math_gen_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.iio_math_gen_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(iio_math_gen_sptr self)"""
        return _iio_swig.iio_math_gen_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(iio_math_gen_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.iio_math_gen_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(iio_math_gen_sptr self, int i) -> size_t"""
        return _iio_swig.iio_math_gen_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(iio_math_gen_sptr self, size_t max_output_buffer)
        set_max_output_buffer(iio_math_gen_sptr self, int port, size_t max_output_buffer)
        """
        return _iio_swig.iio_math_gen_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(iio_math_gen_sptr self, int i) -> size_t"""
        return _iio_swig.iio_math_gen_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(iio_math_gen_sptr self, size_t min_output_buffer)
        set_min_output_buffer(iio_math_gen_sptr self, int port, size_t min_output_buffer)
        """
        return _iio_swig.iio_math_gen_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(iio_math_gen_sptr self) -> hier_block2_sptr"""
        return _iio_swig.iio_math_gen_sptr_to_hier_block2(self)


    def name(self):
        """name(iio_math_gen_sptr self) -> std::string"""
        return _iio_swig.iio_math_gen_sptr_name(self)


    def symbol_name(self):
        """symbol_name(iio_math_gen_sptr self) -> std::string"""
        return _iio_swig.iio_math_gen_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(iio_math_gen_sptr self) -> io_signature_sptr"""
        return _iio_swig.iio_math_gen_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(iio_math_gen_sptr self) -> io_signature_sptr"""
        return _iio_swig.iio_math_gen_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(iio_math_gen_sptr self) -> long"""
        return _iio_swig.iio_math_gen_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(iio_math_gen_sptr self) -> basic_block_sptr"""
        return _iio_swig.iio_math_gen_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(iio_math_gen_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.iio_math_gen_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(iio_math_gen_sptr self) -> std::string"""
        return _iio_swig.iio_math_gen_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(iio_math_gen_sptr self, std::string name)"""
        return _iio_swig.iio_math_gen_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(iio_math_gen_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.iio_math_gen_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(iio_math_gen_sptr self) -> swig_int_ptr"""
        return _iio_swig.iio_math_gen_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(iio_math_gen_sptr self) -> swig_int_ptr"""
        return _iio_swig.iio_math_gen_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(iio_math_gen_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.iio_math_gen_sptr_message_subscribers(self, which_port)

iio_math_gen_sptr_swigregister = _iio_swig.iio_math_gen_sptr_swigregister
iio_math_gen_sptr_swigregister(iio_math_gen_sptr)


iio_math_gen_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
iio_math_gen = iio_math_gen.make;

class power_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::power_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::power_ff)> self) -> power_ff_sptr
        __init__(boost::shared_ptr<(gr::iio::power_ff)> self, power_ff p) -> power_ff_sptr
        """
        this = _iio_swig.new_power_ff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(power_ff_sptr self) -> power_ff"""
        return _iio_swig.power_ff_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_power_ff_sptr
    __del__ = lambda self: None

    def make(self, vlen=1):
        """make(power_ff_sptr self, size_t vlen=1) -> power_ff_sptr"""
        return _iio_swig.power_ff_sptr_make(self, vlen)


    def history(self):
        """history(power_ff_sptr self) -> unsigned int"""
        return _iio_swig.power_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(power_ff_sptr self, int which, int delay)
        declare_sample_delay(power_ff_sptr self, unsigned int delay)
        """
        return _iio_swig.power_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(power_ff_sptr self, int which) -> unsigned int"""
        return _iio_swig.power_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(power_ff_sptr self) -> int"""
        return _iio_swig.power_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(power_ff_sptr self) -> double"""
        return _iio_swig.power_ff_sptr_relative_rate(self)


    def start(self):
        """start(power_ff_sptr self) -> bool"""
        return _iio_swig.power_ff_sptr_start(self)


    def stop(self):
        """stop(power_ff_sptr self) -> bool"""
        return _iio_swig.power_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(power_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.power_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(power_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.power_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(power_ff_sptr self) -> int"""
        return _iio_swig.power_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(power_ff_sptr self, int m)"""
        return _iio_swig.power_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(power_ff_sptr self)"""
        return _iio_swig.power_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(power_ff_sptr self) -> bool"""
        return _iio_swig.power_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(power_ff_sptr self, int m)"""
        return _iio_swig.power_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(power_ff_sptr self) -> int"""
        return _iio_swig.power_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(power_ff_sptr self, int i) -> long"""
        return _iio_swig.power_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(power_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(power_ff_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.power_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(power_ff_sptr self, int i) -> long"""
        return _iio_swig.power_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(power_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(power_ff_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.power_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(power_ff_sptr self, int which) -> float
        pc_input_buffers_full(power_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.power_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(power_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(power_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.power_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(power_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(power_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.power_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(power_ff_sptr self, int which) -> float
        pc_output_buffers_full(power_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.power_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(power_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(power_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.power_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(power_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(power_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.power_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(power_ff_sptr self) -> float"""
        return _iio_swig.power_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(power_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.power_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(power_ff_sptr self)"""
        return _iio_swig.power_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(power_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.power_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(power_ff_sptr self) -> int"""
        return _iio_swig.power_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(power_ff_sptr self) -> int"""
        return _iio_swig.power_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(power_ff_sptr self, int priority) -> int"""
        return _iio_swig.power_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(power_ff_sptr self) -> std::string"""
        return _iio_swig.power_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(power_ff_sptr self) -> std::string"""
        return _iio_swig.power_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(power_ff_sptr self) -> io_signature_sptr"""
        return _iio_swig.power_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(power_ff_sptr self) -> io_signature_sptr"""
        return _iio_swig.power_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(power_ff_sptr self) -> long"""
        return _iio_swig.power_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(power_ff_sptr self) -> basic_block_sptr"""
        return _iio_swig.power_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(power_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.power_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(power_ff_sptr self) -> std::string"""
        return _iio_swig.power_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(power_ff_sptr self, std::string name)"""
        return _iio_swig.power_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(power_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.power_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(power_ff_sptr self) -> swig_int_ptr"""
        return _iio_swig.power_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(power_ff_sptr self) -> swig_int_ptr"""
        return _iio_swig.power_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(power_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.power_ff_sptr_message_subscribers(self, which_port)

power_ff_sptr_swigregister = _iio_swig.power_ff_sptr_swigregister
power_ff_sptr_swigregister(power_ff_sptr)


power_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
power_ff = power_ff.make;

class modulo_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::modulo_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::modulo_ff)> self) -> modulo_ff_sptr
        __init__(boost::shared_ptr<(gr::iio::modulo_ff)> self, modulo_ff p) -> modulo_ff_sptr
        """
        this = _iio_swig.new_modulo_ff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(modulo_ff_sptr self) -> modulo_ff"""
        return _iio_swig.modulo_ff_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_modulo_ff_sptr
    __del__ = lambda self: None

    def make(self, vlen=1):
        """make(modulo_ff_sptr self, size_t vlen=1) -> modulo_ff_sptr"""
        return _iio_swig.modulo_ff_sptr_make(self, vlen)


    def history(self):
        """history(modulo_ff_sptr self) -> unsigned int"""
        return _iio_swig.modulo_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(modulo_ff_sptr self, int which, int delay)
        declare_sample_delay(modulo_ff_sptr self, unsigned int delay)
        """
        return _iio_swig.modulo_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(modulo_ff_sptr self, int which) -> unsigned int"""
        return _iio_swig.modulo_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(modulo_ff_sptr self) -> int"""
        return _iio_swig.modulo_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(modulo_ff_sptr self) -> double"""
        return _iio_swig.modulo_ff_sptr_relative_rate(self)


    def start(self):
        """start(modulo_ff_sptr self) -> bool"""
        return _iio_swig.modulo_ff_sptr_start(self)


    def stop(self):
        """stop(modulo_ff_sptr self) -> bool"""
        return _iio_swig.modulo_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(modulo_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.modulo_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(modulo_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.modulo_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(modulo_ff_sptr self) -> int"""
        return _iio_swig.modulo_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(modulo_ff_sptr self, int m)"""
        return _iio_swig.modulo_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(modulo_ff_sptr self)"""
        return _iio_swig.modulo_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(modulo_ff_sptr self) -> bool"""
        return _iio_swig.modulo_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(modulo_ff_sptr self, int m)"""
        return _iio_swig.modulo_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(modulo_ff_sptr self) -> int"""
        return _iio_swig.modulo_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(modulo_ff_sptr self, int i) -> long"""
        return _iio_swig.modulo_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(modulo_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(modulo_ff_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.modulo_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(modulo_ff_sptr self, int i) -> long"""
        return _iio_swig.modulo_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(modulo_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(modulo_ff_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.modulo_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(modulo_ff_sptr self, int which) -> float
        pc_input_buffers_full(modulo_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(modulo_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(modulo_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(modulo_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(modulo_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(modulo_ff_sptr self, int which) -> float
        pc_output_buffers_full(modulo_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(modulo_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(modulo_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(modulo_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(modulo_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(modulo_ff_sptr self) -> float"""
        return _iio_swig.modulo_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(modulo_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.modulo_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(modulo_ff_sptr self)"""
        return _iio_swig.modulo_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(modulo_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.modulo_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(modulo_ff_sptr self) -> int"""
        return _iio_swig.modulo_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(modulo_ff_sptr self) -> int"""
        return _iio_swig.modulo_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(modulo_ff_sptr self, int priority) -> int"""
        return _iio_swig.modulo_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(modulo_ff_sptr self) -> std::string"""
        return _iio_swig.modulo_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(modulo_ff_sptr self) -> std::string"""
        return _iio_swig.modulo_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(modulo_ff_sptr self) -> io_signature_sptr"""
        return _iio_swig.modulo_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(modulo_ff_sptr self) -> io_signature_sptr"""
        return _iio_swig.modulo_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(modulo_ff_sptr self) -> long"""
        return _iio_swig.modulo_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(modulo_ff_sptr self) -> basic_block_sptr"""
        return _iio_swig.modulo_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(modulo_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.modulo_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(modulo_ff_sptr self) -> std::string"""
        return _iio_swig.modulo_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(modulo_ff_sptr self, std::string name)"""
        return _iio_swig.modulo_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(modulo_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.modulo_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(modulo_ff_sptr self) -> swig_int_ptr"""
        return _iio_swig.modulo_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(modulo_ff_sptr self) -> swig_int_ptr"""
        return _iio_swig.modulo_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(modulo_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.modulo_ff_sptr_message_subscribers(self, which_port)

modulo_ff_sptr_swigregister = _iio_swig.modulo_ff_sptr_swigregister
modulo_ff_sptr_swigregister(modulo_ff_sptr)


modulo_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
modulo_ff = modulo_ff.make;

class modulo_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::modulo_const_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::modulo_const_ff)> self) -> modulo_const_ff_sptr
        __init__(boost::shared_ptr<(gr::iio::modulo_const_ff)> self, modulo_const_ff p) -> modulo_const_ff_sptr
        """
        this = _iio_swig.new_modulo_const_ff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(modulo_const_ff_sptr self) -> modulo_const_ff"""
        return _iio_swig.modulo_const_ff_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_modulo_const_ff_sptr
    __del__ = lambda self: None

    def make(self, modulo, vlen=1):
        """make(modulo_const_ff_sptr self, float modulo, size_t vlen=1) -> modulo_const_ff_sptr"""
        return _iio_swig.modulo_const_ff_sptr_make(self, modulo, vlen)


    def history(self):
        """history(modulo_const_ff_sptr self) -> unsigned int"""
        return _iio_swig.modulo_const_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(modulo_const_ff_sptr self, int which, int delay)
        declare_sample_delay(modulo_const_ff_sptr self, unsigned int delay)
        """
        return _iio_swig.modulo_const_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(modulo_const_ff_sptr self, int which) -> unsigned int"""
        return _iio_swig.modulo_const_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(modulo_const_ff_sptr self) -> int"""
        return _iio_swig.modulo_const_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(modulo_const_ff_sptr self) -> double"""
        return _iio_swig.modulo_const_ff_sptr_relative_rate(self)


    def start(self):
        """start(modulo_const_ff_sptr self) -> bool"""
        return _iio_swig.modulo_const_ff_sptr_start(self)


    def stop(self):
        """stop(modulo_const_ff_sptr self) -> bool"""
        return _iio_swig.modulo_const_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(modulo_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.modulo_const_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(modulo_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.modulo_const_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(modulo_const_ff_sptr self) -> int"""
        return _iio_swig.modulo_const_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(modulo_const_ff_sptr self, int m)"""
        return _iio_swig.modulo_const_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(modulo_const_ff_sptr self)"""
        return _iio_swig.modulo_const_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(modulo_const_ff_sptr self) -> bool"""
        return _iio_swig.modulo_const_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(modulo_const_ff_sptr self, int m)"""
        return _iio_swig.modulo_const_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(modulo_const_ff_sptr self) -> int"""
        return _iio_swig.modulo_const_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(modulo_const_ff_sptr self, int i) -> long"""
        return _iio_swig.modulo_const_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(modulo_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(modulo_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.modulo_const_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(modulo_const_ff_sptr self, int i) -> long"""
        return _iio_swig.modulo_const_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(modulo_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(modulo_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.modulo_const_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(modulo_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(modulo_const_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_const_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(modulo_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(modulo_const_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_const_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(modulo_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(modulo_const_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_const_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(modulo_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(modulo_const_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_const_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(modulo_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(modulo_const_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_const_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(modulo_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(modulo_const_ff_sptr self) -> pmt_vector_float
        """
        return _iio_swig.modulo_const_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(modulo_const_ff_sptr self) -> float"""
        return _iio_swig.modulo_const_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(modulo_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.modulo_const_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(modulo_const_ff_sptr self)"""
        return _iio_swig.modulo_const_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(modulo_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.modulo_const_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(modulo_const_ff_sptr self) -> int"""
        return _iio_swig.modulo_const_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(modulo_const_ff_sptr self) -> int"""
        return _iio_swig.modulo_const_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(modulo_const_ff_sptr self, int priority) -> int"""
        return _iio_swig.modulo_const_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(modulo_const_ff_sptr self) -> std::string"""
        return _iio_swig.modulo_const_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(modulo_const_ff_sptr self) -> std::string"""
        return _iio_swig.modulo_const_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(modulo_const_ff_sptr self) -> io_signature_sptr"""
        return _iio_swig.modulo_const_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(modulo_const_ff_sptr self) -> io_signature_sptr"""
        return _iio_swig.modulo_const_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(modulo_const_ff_sptr self) -> long"""
        return _iio_swig.modulo_const_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(modulo_const_ff_sptr self) -> basic_block_sptr"""
        return _iio_swig.modulo_const_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(modulo_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.modulo_const_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(modulo_const_ff_sptr self) -> std::string"""
        return _iio_swig.modulo_const_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(modulo_const_ff_sptr self, std::string name)"""
        return _iio_swig.modulo_const_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(modulo_const_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.modulo_const_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(modulo_const_ff_sptr self) -> swig_int_ptr"""
        return _iio_swig.modulo_const_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(modulo_const_ff_sptr self) -> swig_int_ptr"""
        return _iio_swig.modulo_const_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(modulo_const_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.modulo_const_ff_sptr_message_subscribers(self, which_port)

modulo_const_ff_sptr_swigregister = _iio_swig.modulo_const_ff_sptr_swigregister
modulo_const_ff_sptr_swigregister(modulo_const_ff_sptr)


modulo_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
modulo_const_ff = modulo_const_ff.make;

class attr_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::attr_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::attr_sink)> self) -> attr_sink_sptr
        __init__(boost::shared_ptr<(gr::iio::attr_sink)> self, attr_sink p) -> attr_sink_sptr
        """
        this = _iio_swig.new_attr_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(attr_sink_sptr self) -> attr_sink"""
        return _iio_swig.attr_sink_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_attr_sink_sptr
    __del__ = lambda self: None

    def make(self, uri, device, channel, type, output, required_enable):
        """make(attr_sink_sptr self, std::string const & uri, std::string const & device, std::string const & channel, int type, bool output, bool required_enable) -> attr_sink_sptr"""
        return _iio_swig.attr_sink_sptr_make(self, uri, device, channel, type, output, required_enable)


    def history(self):
        """history(attr_sink_sptr self) -> unsigned int"""
        return _iio_swig.attr_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(attr_sink_sptr self, int which, int delay)
        declare_sample_delay(attr_sink_sptr self, unsigned int delay)
        """
        return _iio_swig.attr_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(attr_sink_sptr self, int which) -> unsigned int"""
        return _iio_swig.attr_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(attr_sink_sptr self) -> int"""
        return _iio_swig.attr_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(attr_sink_sptr self) -> double"""
        return _iio_swig.attr_sink_sptr_relative_rate(self)


    def start(self):
        """start(attr_sink_sptr self) -> bool"""
        return _iio_swig.attr_sink_sptr_start(self)


    def stop(self):
        """stop(attr_sink_sptr self) -> bool"""
        return _iio_swig.attr_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(attr_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.attr_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(attr_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.attr_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(attr_sink_sptr self) -> int"""
        return _iio_swig.attr_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(attr_sink_sptr self, int m)"""
        return _iio_swig.attr_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(attr_sink_sptr self)"""
        return _iio_swig.attr_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(attr_sink_sptr self) -> bool"""
        return _iio_swig.attr_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(attr_sink_sptr self, int m)"""
        return _iio_swig.attr_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(attr_sink_sptr self) -> int"""
        return _iio_swig.attr_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(attr_sink_sptr self, int i) -> long"""
        return _iio_swig.attr_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(attr_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(attr_sink_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.attr_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(attr_sink_sptr self, int i) -> long"""
        return _iio_swig.attr_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(attr_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(attr_sink_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.attr_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(attr_sink_sptr self, int which) -> float
        pc_input_buffers_full(attr_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(attr_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(attr_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(attr_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(attr_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(attr_sink_sptr self, int which) -> float
        pc_output_buffers_full(attr_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(attr_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(attr_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(attr_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(attr_sink_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(attr_sink_sptr self) -> float"""
        return _iio_swig.attr_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(attr_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.attr_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(attr_sink_sptr self)"""
        return _iio_swig.attr_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(attr_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.attr_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(attr_sink_sptr self) -> int"""
        return _iio_swig.attr_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(attr_sink_sptr self) -> int"""
        return _iio_swig.attr_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(attr_sink_sptr self, int priority) -> int"""
        return _iio_swig.attr_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(attr_sink_sptr self) -> std::string"""
        return _iio_swig.attr_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(attr_sink_sptr self) -> std::string"""
        return _iio_swig.attr_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(attr_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.attr_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(attr_sink_sptr self) -> io_signature_sptr"""
        return _iio_swig.attr_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(attr_sink_sptr self) -> long"""
        return _iio_swig.attr_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(attr_sink_sptr self) -> basic_block_sptr"""
        return _iio_swig.attr_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(attr_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.attr_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(attr_sink_sptr self) -> std::string"""
        return _iio_swig.attr_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(attr_sink_sptr self, std::string name)"""
        return _iio_swig.attr_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(attr_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.attr_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(attr_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.attr_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(attr_sink_sptr self) -> swig_int_ptr"""
        return _iio_swig.attr_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(attr_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.attr_sink_sptr_message_subscribers(self, which_port)

attr_sink_sptr_swigregister = _iio_swig.attr_sink_sptr_swigregister
attr_sink_sptr_swigregister(attr_sink_sptr)


attr_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
attr_sink = attr_sink.make;

class attr_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::iio::attr_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::iio::attr_source)> self) -> attr_source_sptr
        __init__(boost::shared_ptr<(gr::iio::attr_source)> self, attr_source p) -> attr_source_sptr
        """
        this = _iio_swig.new_attr_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(attr_source_sptr self) -> attr_source"""
        return _iio_swig.attr_source_sptr___deref__(self)

    __swig_destroy__ = _iio_swig.delete_attr_source_sptr
    __del__ = lambda self: None

    def make(self, uri, device, channel, attribute, update_interval_ms, samples_per_update, data_type, attr_type, output, address, required_enable):
        """make(attr_source_sptr self, std::string const & uri, std::string const & device, std::string const & channel, std::string const & attribute, int update_interval_ms, int samples_per_update, int data_type, int attr_type, bool output, uint32_t address, bool required_enable) -> attr_source_sptr"""
        return _iio_swig.attr_source_sptr_make(self, uri, device, channel, attribute, update_interval_ms, samples_per_update, data_type, attr_type, output, address, required_enable)


    def history(self):
        """history(attr_source_sptr self) -> unsigned int"""
        return _iio_swig.attr_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(attr_source_sptr self, int which, int delay)
        declare_sample_delay(attr_source_sptr self, unsigned int delay)
        """
        return _iio_swig.attr_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(attr_source_sptr self, int which) -> unsigned int"""
        return _iio_swig.attr_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(attr_source_sptr self) -> int"""
        return _iio_swig.attr_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(attr_source_sptr self) -> double"""
        return _iio_swig.attr_source_sptr_relative_rate(self)


    def start(self):
        """start(attr_source_sptr self) -> bool"""
        return _iio_swig.attr_source_sptr_start(self)


    def stop(self):
        """stop(attr_source_sptr self) -> bool"""
        return _iio_swig.attr_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(attr_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _iio_swig.attr_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(attr_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _iio_swig.attr_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(attr_source_sptr self) -> int"""
        return _iio_swig.attr_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(attr_source_sptr self, int m)"""
        return _iio_swig.attr_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(attr_source_sptr self)"""
        return _iio_swig.attr_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(attr_source_sptr self) -> bool"""
        return _iio_swig.attr_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(attr_source_sptr self, int m)"""
        return _iio_swig.attr_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(attr_source_sptr self) -> int"""
        return _iio_swig.attr_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(attr_source_sptr self, int i) -> long"""
        return _iio_swig.attr_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(attr_source_sptr self, long max_output_buffer)
        set_max_output_buffer(attr_source_sptr self, int port, long max_output_buffer)
        """
        return _iio_swig.attr_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(attr_source_sptr self, int i) -> long"""
        return _iio_swig.attr_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(attr_source_sptr self, long min_output_buffer)
        set_min_output_buffer(attr_source_sptr self, int port, long min_output_buffer)
        """
        return _iio_swig.attr_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(attr_source_sptr self, int which) -> float
        pc_input_buffers_full(attr_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(attr_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(attr_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(attr_source_sptr self, int which) -> float
        pc_input_buffers_full_var(attr_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(attr_source_sptr self, int which) -> float
        pc_output_buffers_full(attr_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(attr_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(attr_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(attr_source_sptr self, int which) -> float
        pc_output_buffers_full_var(attr_source_sptr self) -> pmt_vector_float
        """
        return _iio_swig.attr_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(attr_source_sptr self) -> float"""
        return _iio_swig.attr_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(attr_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _iio_swig.attr_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(attr_source_sptr self)"""
        return _iio_swig.attr_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(attr_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _iio_swig.attr_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(attr_source_sptr self) -> int"""
        return _iio_swig.attr_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(attr_source_sptr self) -> int"""
        return _iio_swig.attr_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(attr_source_sptr self, int priority) -> int"""
        return _iio_swig.attr_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(attr_source_sptr self) -> std::string"""
        return _iio_swig.attr_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(attr_source_sptr self) -> std::string"""
        return _iio_swig.attr_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(attr_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.attr_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(attr_source_sptr self) -> io_signature_sptr"""
        return _iio_swig.attr_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(attr_source_sptr self) -> long"""
        return _iio_swig.attr_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(attr_source_sptr self) -> basic_block_sptr"""
        return _iio_swig.attr_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(attr_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _iio_swig.attr_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(attr_source_sptr self) -> std::string"""
        return _iio_swig.attr_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(attr_source_sptr self, std::string name)"""
        return _iio_swig.attr_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(attr_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _iio_swig.attr_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(attr_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.attr_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(attr_source_sptr self) -> swig_int_ptr"""
        return _iio_swig.attr_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(attr_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _iio_swig.attr_source_sptr_message_subscribers(self, which_port)

attr_source_sptr_swigregister = _iio_swig.attr_source_sptr_swigregister
attr_source_sptr_swigregister(attr_source_sptr)


attr_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
attr_source = attr_source.make;



